package engineTester;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import models.RawModel;
import models.TexturedModel;
import normalMappingObjConverter.NormalMappedObjLoader;
import objConverter.ModelData;
import objConverter.OBJFileLoader;

import org.lwjgl.opengl.Display;
import org.lwjgl.opengl.GL11;
import org.lwjgl.opengl.GL30;
import org.lwjgl.util.vector.Vector2f;
import org.lwjgl.util.vector.Vector3f;
import org.lwjgl.util.vector.Vector4f;

import renderEngine.DisplayManager;
import renderEngine.Loader;
import renderEngine.MasterRenderer;
import renderEngine.OBJLoader;
import terrains.Terrain;
import textures.ModelTexture;
import textures.TerrainTexture;
import textures.TerrainTexturePack;
import toolbox.MousePicker;
import water.WaterFrameBuffers;
import water.WaterRenderer;
import water.WaterShader;
import water.WaterTile;
import entities.Camera;
import entities.Entity;
import entities.Light;
import entities.Player;
import fontMeshCreator.FontType;
import fontMeshCreator.GUIText;
import fontRendering.TextMaster;
import guis.GuiRenderer;
import guis.GuiTexture;

public class MainGameLoop {

	public static void main(String[] args) {
		//Create Dislplay and loading the loader
		DisplayManager.createDisplay();
		Loader loader = new Loader();
		TextMaster.init(loader);
		
		FontType font = new FontType(loader.loadTexture("arial",0), new File("res/arial.fnt"));
		GUIText text = new GUIText("This is a test text", 1f,font,new Vector2f(0.5f,0.5f),0.5f, true);
		text.setColour(1, 0, 0);
		
		TextMaster.loadText(text);
		
		
		Random random = new Random();
		List<Entity> entities = new ArrayList<Entity>();
		List<Entity> normalEntities = new ArrayList<Entity>();
		
		//Creating TexturePack
		TerrainTexture backgroundTexture = new TerrainTexture(loader.loadTexture("grassy2",-0.4f));
		TerrainTexture rTexture = new TerrainTexture(loader.loadTexture("mud", -0.4f));
		TerrainTexture gTexture = new TerrainTexture(loader.loadTexture("grassFlowers", -0.4f));
		TerrainTexture bTexture = new TerrainTexture(loader.loadTexture("path",-0.4f));
		TerrainTexture blendMap = new TerrainTexture(loader.loadTexture("blendMap",-0.4f));
		
		TerrainTexturePack texturePack = new TerrainTexturePack(backgroundTexture,rTexture,gTexture,bTexture);
		
		//Set the light
		Light light = new Light(new Vector3f(20000,20000,2000), new Vector3f(1,1,1));
		//Light light = new Light(new Vector3f(10000,10000,7000), new Vector3f(0.8f,0.8f,0.8f));
		List<Light> lights = new ArrayList<Light>();
		lights.add(light);
		lights.add(new Light(new Vector3f(185,10,-293), new Vector3f(2,0,0), new Vector3f(1,0.01f,0.002f)));
		lights.add(new Light(new Vector3f(370,17,-300), new Vector3f(0,2,2), new Vector3f(1,0.01f,0.002f)));
		lights.add(new Light(new Vector3f(293,7,-305), new Vector3f(2,2,0), new Vector3f(1,0.01f,0.002f)));
		
		TexturedModel lamp = new TexturedModel(OBJLoader.loadObjModel("lamp", loader), new ModelTexture(loader.loadTexture("lamp",-0.4f)));
		lamp.getTexture().setHasTransparency(true);
		lamp.getTexture().setUseFakeLighting(true);
		entities.add(new Entity(lamp,new Vector3f(185,-4.7f,-293),0,0,0,1));
		entities.add(new Entity(lamp,new Vector3f(370,4.2f,-300),0,0,0,1));
		entities.add(new Entity(lamp,new Vector3f(293,-4.9f,-305),0,0,0,1));
		
		
		//creating the terrains
		List<Terrain> terrains = new ArrayList<Terrain>();
		
		Terrain terrain = new Terrain(0,-1,loader,texturePack,blendMap,"heightMap");
		Terrain terrain2 = new Terrain(-1,-1,loader,texturePack,blendMap,"heightMap");
		Terrain terrain3 = new Terrain(0,0,loader,texturePack,blendMap,"heightMap");
		Terrain terrain4 = new Terrain(-1,0,loader,texturePack,blendMap,"heightMap");
		
		terrains.add(terrain);
		
		
		//Create tree model
		RawModel model = OBJLoader.loadObjModel("tree", loader);
		TexturedModel staticModel = new TexturedModel(model,new ModelTexture(loader.loadTexture("tree",-0.4f)));
		
		//New Method: Load to vao
		ModelData data = OBJFileLoader.loadOBJ("tree");
		RawModel treeModel = loader.loadToVAO(data.getVertices(), data.getTextureCoords(), data.getNormals(), data.getIndices());
		
		
		
		//Creating grass, flowers and fern models
		TexturedModel grass = new TexturedModel(OBJLoader.loadObjModel("grassModel", loader), new ModelTexture(loader.loadTexture("grassy",-0.4f)));
		grass.getTexture().setHasTransparency(true);
		TexturedModel flowers = new TexturedModel(OBJLoader.loadObjModel("grassModel", loader), new ModelTexture(loader.loadTexture("flower",-0.4f)));
		flowers.getTexture().setHasTransparency(true);
		TexturedModel fern = new TexturedModel(OBJLoader.loadObjModel("fern", loader), new ModelTexture(loader.loadTexture("fern",-0.4f)));
		fern.getTexture().setHasTransparency(true);
		
		//the number of rows defines how many different texture can be rendered to the same TexturedModel
		fern.getTexture().setNumberOfRows(2);
		
		//Adding low-poly tree
		TexturedModel lpolyTree = new TexturedModel(OBJLoader.loadObjModel("lowPolyTree", loader), new ModelTexture(loader.loadTexture("lowPolyTree",-0.4f)));
		fern.getTexture().setHasTransparency(true);
		
		//Set the fake lighting to the grass and to the flowers
		grass.getTexture().setUseFakeLighting(true);
		flowers.getTexture().setUseFakeLighting(true);
		
		//adding pine
		TexturedModel pine = new TexturedModel(OBJLoader.loadObjModel("pine", loader), new ModelTexture(loader.loadTexture("pine",-0.4f)));
		fern.getTexture().setHasTransparency(true);
		
		
		
		
		
		//Creating the entities on the terrain
		for(int i=0; i<60; i++){
			
			//entities.add(new Entity(pine, randPos(terrain),0,0,0,1));
			entities.add(new Entity(pine, randPos(terrain,175,-205,80,80),0,0,0,1));

			//entities.add(new Entity(staticModel, randPos(terrain),0,0,0,5));
			//entities.add(new Entity(grass, randPos(terrain),0,0,0,1));
			//entities.add(new Entity(flowers, randPos(terrain),0,0,0,1));
			//entities.add(new Entity(fern, random.nextInt(4),randPos(terrain),0,0,0,0.6f));
			//entities.add(new Entity(lpolyTree,randPos(terrain),0,0,0,1));
			
			//entities.add(new Entity(staticModel, new Vector3f(random.nextFloat()*800 - 400,0,random.nextFloat()*800 - 400),0,0,0,5));
			/*entities.add(new Entity(grass, new Vector3f(random.nextFloat()*800 - 400,0,random.nextFloat()*800 - 400),0,0,0,1f));
			entities.add(new Entity(flowers, new Vector3f(random.nextFloat()*800 - 400,0,random.nextFloat()*800 - 400),0,0,0,1f));
			entities.add(new Entity(fern, new Vector3f(random.nextFloat()*800 - 400,0,random.nextFloat()*800 - 400),0,0,0,0.6f));
			*/
			
		}
		
		
		//Adding player
		RawModel personModel = OBJLoader.loadObjModel("person", loader);
		TexturedModel person = new TexturedModel(personModel, new ModelTexture(loader.loadTexture("playerTexture",-0.4f)));
		
		Player player = new Player(person,new Vector3f(100,5,-150),0,0,0,1f);
		Camera camera = new Camera(player);
		
		List<GuiTexture> guis = new ArrayList<GuiTexture>();
		//GuiTexture gui = new GuiTexture(loader.loadTexture("socuwan"), new Vector2f(0.5f, 0.5f), new Vector2f(0.25f, 0.25f));
		//GuiTexture gui2 = new GuiTexture(loader.loadTexture("thinmatrix"), new Vector2f(0.3f, 0.58f), new Vector2f(0.4f, 0.4f));
		
		
		TexturedModel barrelModel = new TexturedModel(NormalMappedObjLoader.loadOBJ("barrel", loader), new ModelTexture(loader.loadTexture("barrel",-0.4f)));
		barrelModel.getTexture().setNormalMap(loader.loadTexture("barrelNormal",-0.4f));
		barrelModel.getTexture().setShineDamper(10);
		barrelModel.getTexture().setReflectivity(0.5f);
		
		normalEntities.add(new Entity(barrelModel, new Vector3f(75,10,-75), 0, 0, 0, 1));
		
		
		
		
		//guis.add(gui);
		//guis.add(gui2);
		
		GuiRenderer guiRenderer = new GuiRenderer(loader);		
		
		MasterRenderer renderer = new MasterRenderer(loader);
		
		MousePicker picker = new MousePicker(camera,renderer.getProjectionMatrix(),terrain);
		
		Entity lampEntity = new Entity(lamp, new Vector3f(293,-6.8f, -305),0,0,0,1f);
		entities.add(lampEntity);
		
		lights.add(new Light(new Vector3f(293,7,-305), new Vector3f(2,2,0), new Vector3f(1,0.01f,0.002f)));
		lights.add(light);
		
		WaterFrameBuffers fbos = new WaterFrameBuffers();
		
		WaterShader waterShader = new WaterShader();
		WaterRenderer waterRenderer = new WaterRenderer(loader,waterShader,renderer.getProjectionMatrix(), fbos);
		List<WaterTile> waters = new ArrayList<WaterTile>();
		WaterTile water = new WaterTile(400, -400, -0.0f);
		
		waters.add(water);
		
		
		//RENDER GUIS
		//GuiTexture reflection = new GuiTexture(fbos.getReflectionTexture(), new Vector2f(-0.5f, 0.5f), new Vector2f(0.25f, 0.25f));
		//GuiTexture refraction = new GuiTexture(fbos.getRefractionTexture(), new Vector2f(0.5f, 0.5f), new Vector2f(0.25f, 0.25f));
		
		//guis.add(reflection);
		//guis.add(refraction);
		
		entities.add(player);
		
		while(!Display.isCloseRequested()){
			//Camera movement each frame
			camera.move();
			player.move(terrain);
			
			picker.update();
			/*Vector3f terrainPoint = picker.getCurrentTerrainPoint();
			if(terrainPoint != null){
				lampEntity.setPosition(terrainPoint);
				light.setPosition(new Vector3f(terrainPoint.x, terrainPoint.y+15, terrainPoint.z));
			}
			*/
			
			
			//render the scene to FrameBufferObject( for reflection and refraction maps )
			
			//enabling the clip distance
			GL11.glEnable(GL30.GL_CLIP_DISTANCE0);
			
			//render reflection
			fbos.bindReflectionFrameBuffer();
			float distance = 2*(camera.getPosition().y - water.getHeight());
			camera.getPosition().y -= distance;
			camera.invertPitch();
			renderer.renderScene(entities, normalEntities, terrains, lights, camera, new Vector4f(0,1,0,-water.getHeight()+0.15f));
			camera.getPosition().y += distance;
			camera.invertPitch();
		
			//render refraction
			fbos.bindRefractionFrameBuffer();
			renderer.renderScene(entities, normalEntities, terrains, lights, camera, new Vector4f(0,-1,0,water.getHeight()));
		
			fbos.unbindCurrentFrameBuffer();
			GL11.glDisable(GL30.GL_CLIP_DISTANCE0);
			//render the scene
			renderer.renderScene(entities, normalEntities, terrains, lights, camera, new Vector4f(0,1,0,0));
			
			//render the water
			waterRenderer.render(waters, camera, light);
			
			//render the player
			//renderer.processEntity(player);
			
			//render guis
			guiRenderer.render(guis);
			TextMaster.render();
			
			DisplayManager.updateDisplay();
		}
		
		//Clean up everything before close the Display
		TextMaster.cleanUp();
		fbos.cleanUp();
		waterShader.cleanUp();
		guiRenderer.cleanUp();
		renderer.cleanUp();
		loader.cleanUp();
		
		DisplayManager.closeDisplay();
		
	}
	
	public static Vector3f randPos(Terrain terrain){
		float x = new Random().nextFloat()*800 - 400;
		float z = new Random().nextFloat()*800 - 400;
		float y = terrain.getHeightOfTerrain(x, z);
		return new Vector3f(x,y,z);
				
		
	}
	
	public static Vector3f randPos(Terrain terrain, float centerX, float centerZ, int lengthX, int lengthZ){
		float randx = 2*((float)(new Random().nextInt(2))-0.5f);
		float randz = 2*((float)(new Random().nextInt(2))-0.5f);
		float randr = new Random().nextFloat()*360;
		float x = (float) (Math.cos(randr*360)*lengthX  + centerX);
		float z = (float) (Math.sin(randr*360)*lengthZ  + centerZ);
		
		float y = terrain.getHeightOfTerrain(x, z);
		return new Vector3f(x,y,z);				
		
	}

}
